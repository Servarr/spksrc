From 2a9ffea35ca72aff2082450309864d4c5d6b383b Mon Sep 17 00:00:00 2001
From: ta264 <ta264@users.noreply.github.com>
Date: Thu, 5 May 2022 19:00:44 +0100
Subject: [PATCH] Remove seccomp, PR_SET_NO_NEW_PRIVS, PR_SET_CHILD_SUBREAPER

---
 bubblewrap.c | 171 +--------------------------------------------------
 1 file changed, 2 insertions(+), 169 deletions(-)

diff --git a/bubblewrap.c b/bubblewrap.c
index 2f2fca5..bca2b24 100644
--- a/bubblewrap.c
+++ b/bubblewrap.c
@@ -31,9 +31,6 @@
 #include <sys/signalfd.h>
 #include <sys/capability.h>
 #include <sys/prctl.h>
-#include <linux/sched.h>
-#include <linux/seccomp.h>
-#include <linux/filter.h>
 
 #include "utils.h"
 #include "network.h"
@@ -84,12 +81,10 @@ int opt_block_fd = -1;
 int opt_userns_block_fd = -1;
 int opt_info_fd = -1;
 int opt_json_status_fd = -1;
-int opt_seccomp_fd = -1;
 const char *opt_sandbox_hostname = NULL;
 char *opt_args_data = NULL;  /* owned */
 int opt_userns_fd = -1;
 int opt_userns2_fd = -1;
-int opt_pidns_fd = -1;
 int next_perms = -1;
 
 #define CAP_TO_MASK_0(x) (1L << ((x) & 31))
@@ -235,51 +230,6 @@ lock_file_new (const char *path)
   return lock;
 }
 
-typedef struct _SeccompProgram SeccompProgram;
-
-struct _SeccompProgram
-{
-  struct sock_fprog  program;
-  SeccompProgram    *next;
-};
-
-DEFINE_LINKED_LIST (SeccompProgram, seccomp_program)
-
-static SeccompProgram *
-seccomp_program_new (int *fd)
-{
-  SeccompProgram *self = _seccomp_program_append_new ();
-  cleanup_free char *data = NULL;
-  size_t len;
-
-  data = load_file_data (*fd, &len);
-
-  if (data == NULL)
-    die_with_error ("Can't read seccomp data");
-
-  close (*fd);
-  *fd = -1;
-
-  if (len % 8 != 0)
-    die ("Invalid seccomp data, must be multiple of 8");
-
-  self->program.len = len / 8;
-  self->program.filter = (struct sock_filter *) steal_pointer (&data);
-  return self;
-}
-
-static void
-seccomp_programs_apply (void)
-{
-  SeccompProgram *program;
-
-  for (program = seccomp_programs; program != NULL; program = program->next)
-    {
-      if (prctl (PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &program->program) != 0)
-        die_with_error ("prctl(PR_SET_SECCOMP)");
-    }
-}
-
 static void
 usage (int ecode, FILE *out)
 {
@@ -301,7 +251,6 @@ usage (int ecode, FILE *out)
            "    --unshare-cgroup-try         Create new cgroup namespace if possible else continue by skipping it\n"
            "    --userns FD                  Use this user namespace (cannot combine with --unshare-user)\n"
            "    --userns2 FD                 After setup switch to this user namespace, only useful with --userns\n"
-           "    --pidns FD                   Use this user namespace (as parent namespace if using --unshare-pid)\n"
            "    --uid UID                    Custom uid in the sandbox (requires --unshare-user or --userns)\n"
            "    --gid GID                    Custom gid in the sandbox (requires --unshare-user or --userns)\n"
            "    --hostname NAME              Custom hostname in the sandbox (requires --unshare-uts)\n"
@@ -329,8 +278,6 @@ usage (int ecode, FILE *out)
            "    --bind-data FD DEST          Copy from FD to file which is bind-mounted on DEST\n"
            "    --ro-bind-data FD DEST       Copy from FD to file which is readonly bind-mounted on DEST\n"
            "    --symlink SRC DEST           Create symlink at DEST with target SRC\n"
-           "    --seccomp FD                 Load and use seccomp rules from FD (not repeatable)\n"
-           "    --add-seccomp FD             Load and use seccomp rules from FD (repeatable)\n"
            "    --block-fd FD                Block on FD until some data to read is available\n"
            "    --userns-block-fd FD         Block on FD until the user namespace is ready\n"
            "    --info-fd FD                 Write information about the running container to FD\n"
@@ -592,8 +539,6 @@ do_init (int event_fd, pid_t initial_pid)
   /* Optionally bind our lifecycle to that of the caller */
   handle_die_with_parent ();
 
-  seccomp_programs_apply ();
-
   while (TRUE)
     {
       pid_t child;
@@ -1209,7 +1154,7 @@ setup_newroot (bool unshare_pid,
           if (ensure_dir (dest, 0755) != 0)
             die_with_error ("Can't mkdir %s", op->dest);
 
-          if (unshare_pid || opt_pidns_fd != -1)
+          if (unshare_pid)
             {
               /* Our own procfs */
               privileged_op (privileged_op_socket,
@@ -2123,50 +2068,6 @@ parse_args_recurse (int          *argcp,
 
           opt_json_status_fd = the_fd;
 
-          argv += 1;
-          argc -= 1;
-        }
-      else if (strcmp (arg, "--seccomp") == 0)
-        {
-          int the_fd;
-          char *endptr;
-
-          if (argc < 2)
-            die ("--seccomp takes an argument");
-
-          if (seccomp_programs != NULL)
-            die ("--seccomp cannot be combined with --add-seccomp-fd");
-
-          if (opt_seccomp_fd != -1)
-            warn_only_last_option ("--seccomp");
-
-          the_fd = strtol (argv[1], &endptr, 10);
-          if (argv[1][0] == 0 || endptr[0] != 0 || the_fd < 0)
-            die ("Invalid fd: %s", argv[1]);
-
-          opt_seccomp_fd = the_fd;
-
-          argv += 1;
-          argc -= 1;
-        }
-      else if (strcmp (arg, "--add-seccomp-fd") == 0)
-        {
-          int the_fd;
-          char *endptr;
-
-          if (argc < 2)
-            die ("--add-seccomp-fd takes an argument");
-
-          if (opt_seccomp_fd != -1)
-            die ("--add-seccomp-fd cannot be combined with --seccomp");
-
-          the_fd = strtol (argv[1], &endptr, 10);
-          if (argv[1][0] == 0 || endptr[0] != 0 || the_fd < 0)
-            die ("Invalid fd: %s", argv[1]);
-
-          /* takes ownership of fd */
-          seccomp_program_new (&the_fd);
-
           argv += 1;
           argc -= 1;
         }
@@ -2207,26 +2108,6 @@ parse_args_recurse (int          *argcp,
 
           opt_userns2_fd = the_fd;
 
-          argv += 1;
-          argc -= 1;
-        }
-      else if (strcmp (arg, "--pidns") == 0)
-        {
-          int the_fd;
-          char *endptr;
-
-          if (argc < 2)
-            die ("--pidns takes an argument");
-
-          if (opt_pidns_fd != -1)
-            warn_only_last_option ("--pidns");
-
-          the_fd = strtol (argv[1], &endptr, 10);
-          if (argv[1][0] == 0 || endptr[0] != 0 || the_fd < 0)
-            die ("Invalid fd: %s", argv[1]);
-
-          opt_pidns_fd = the_fd;
-
           argv += 1;
           argc -= 1;
         }
@@ -2569,10 +2450,6 @@ main (int    argc,
   /* Get the (optional) privileges we need */
   acquire_privs ();
 
-  /* Never gain any more privs during exec */
-  if (prctl (PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) < 0)
-    die_with_error ("prctl(PR_SET_NO_NEW_PRIVS) failed");
-
   /* The initial code is run with high permissions
      (i.e. CAP_SYS_ADMIN), so take lots of care. */
 
@@ -2724,7 +2601,7 @@ main (int    argc,
   clone_flags = SIGCHLD | CLONE_NEWNS;
   if (opt_unshare_user)
     clone_flags |= CLONE_NEWUSER;
-  if (opt_unshare_pid && opt_pidns_fd == -1)
+  if (opt_unshare_pid)
     clone_flags |= CLONE_NEWPID;
   if (opt_unshare_net)
     clone_flags |= CLONE_NEWNET;
@@ -2771,14 +2648,6 @@ main (int    argc,
       die_with_error ("Joining specified user namespace failed");
     }
 
-  /* Sometimes we have uninteresting intermediate pids during the setup, set up code to pass the real pid down */
-  if (opt_pidns_fd != -1)
-    {
-      /* Mark us as a subreaper, this way we can get exit status from grandchildren */
-      prctl (PR_SET_CHILD_SUBREAPER, 1, 0, 0, 0);
-      create_pid_socketpair (intermediate_pids_sockets);
-    }
-
   pid = raw_clone (clone_flags, NULL);
   if (pid == -1)
     {
@@ -2868,31 +2737,6 @@ main (int    argc,
       return monitor_child (event_fd, pid, setup_finished_pipe[0]);
     }
 
-  if (opt_pidns_fd > 0)
-    {
-      if (setns (opt_pidns_fd, CLONE_NEWPID) != 0)
-        die_with_error ("Setting pidns failed");
-
-      /* fork to get the passed in pid ns */
-      fork_intermediate_child ();
-
-      /* We might both have specified an --pidns *and* --unshare-pid, so set up a new child pid namespace under the specified one */
-      if (opt_unshare_pid)
-        {
-          if (unshare (CLONE_NEWPID))
-            die_with_error ("unshare pid ns");
-
-          /* fork to get the new pid ns */
-          fork_intermediate_child ();
-        }
-
-      /* We're back, either in a child or grandchild, so message the actual pid to the monitor */
-
-      close (intermediate_pids_sockets[0]);
-      send_pid_on_socket (intermediate_pids_sockets[1]);
-      close (intermediate_pids_sockets[1]);
-    }
-
   /* Child, in sandbox, privileged in the parent or in the user namespace (if --unshare-user).
    *
    * Note that for user namespaces we run as euid 0 during clone(), so
@@ -3113,13 +2957,6 @@ main (int    argc,
       close (opt_block_fd);
     }
 
-  if (opt_seccomp_fd != -1)
-    {
-      assert (seccomp_programs == NULL);
-      /* takes ownership of fd */
-      seccomp_program_new (&opt_seccomp_fd);
-    }
-
   umask (old_umask);
 
   new_cwd = "/";
@@ -3212,10 +3049,6 @@ main (int    argc,
   if (!is_privileged)
     set_ambient_capabilities ();
 
-  /* Should be the last thing before execve() so that filters don't
-   * need to handle anything above */
-  seccomp_programs_apply ();
-
   if (setup_finished_pipe[1] != -1)
     {
       char data = 0;
-- 
2.25.1

